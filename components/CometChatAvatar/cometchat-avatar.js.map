{"version":3,"file":"cometchat-avatar.js","sourceRoot":"","sources":["../../src/components/CometChatAvatar/cometchat-avatar.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n@customElement('cometchat-avatar')\nexport class CometChatAvatar  extends LitElement{\n  @property() image!: string;\n  @property() name: string = \"raj\";\n  @property({type:Object}) style:any = {\n     borderRadius:\"16px\",\n     width : \"28px\",\n     height : \"28px\",\n     border : \"none\",\n     backgroundColor : \"red\",\n     nameTextColor : \"rgb(20,20,20)\",\n     backgroundSize : \"cover\",\n     nameTextFont : \"500 16px Inter\",\n     outerView : \"\",\n     outerViewSpacing : \"\",\n     outerViewBorderRadius:\"\"\n  };\n  static styles = [\n\n    css`\n    :host {\n      display: block;\n    }\n    .avatar__container {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: stretch;\n      background-color: #ffffff;\n      box-sizing: content-box;\n      cursor: inherit;\n      outline: none;\n      position: static;\n      padding: 0;\n    }\n    .image__style{\n      display: flex;\n      width: 100%;\n      height: 100%;\n      flex: 1 1 100%;\n      background-color: transparent;\n      background-position: center;\n    }\n    `\n  ];\n  constructor(){\n    super()\n    this.updateAvatar()\n}\noverride update(changedProperties: Map<string, unknown>) {\n  this.updateAvatar()\n  super.update(changedProperties)\n  }\n  updateAvatar(){\n    if (this.image && this.image.trim().length) {\n      this.avatar = this.image\n    }\n    else if (this.name && Object.keys(this.name).length) {\n      let splitName = this.name.split(\" \")\n      const char = (splitName.length && splitName.length > 1 ) ? splitName[0].substring(0, 1).toUpperCase() + splitName[1].substring(0, 1).toUpperCase():   this.name.substring(0, 2).toUpperCase();\n      this.avatar = this.generateAvatar(char);\n    }\n    this.render()\n  }\n  avatar = \"\";\n  \n\n  generateAvatar = (data: string) => {\n    const canvas = document.createElement(\"canvas\");\n    const context: any = canvas.getContext(\"2d\");\n    canvas.width = 200;\n    canvas.height = 200;\n    //Draw background\n    context.fillStyle = this.style?.backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    //Draw text\n    context.font = this.getCanvasFontSize(this.style?.nameTextFont);;\n    context.fillStyle = this.style?.nameTextColor;\n    context.strokeStyle = \"rgba(20, 20, 20, 8%)\";\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    context.fillText(data, canvas.width / 2, canvas.height / 2);\n    return canvas.toDataURL(\"image/svg\");\n  }\n  getCanvasFontSize(font: string) {\n    let fontStyle = font?.split(\" \");\n    let fontSize = Number(fontStyle[1]?.replace(\"px\", \"\"));\n    let fontInPixel = fontSize * 5.5 + \"px\"\n    return `${fontStyle[0]} ${fontInPixel} ${fontStyle[2]}`\n  }\n  connectedCallback() {\n    super.connectedCallback()\n  }\n  render() {\n    return html`<div style=${styleMap(this.getOuterViewStyle())}>\n      <span style=${styleMap(this.getContainerStyle())} class=\"avatar__container\">\n        <span style=${styleMap(this.getImageStyle())} class=\"image__style\"></span>\n      </span>\n    </div>`;\n  }\n  // this object contains dynamic stylings for this component\n    getImageStyle = () => {\n      return {\n        backgroundSize: this.style?.backgroundSize,\n        backgroundImage: `url(${this.avatar})`,\n        border: `${this.style?.border} `,\n        borderRadius: this.style?.borderRadius,\n      };\n    }\n    getContainerStyle = () => {\n      return {\n        height: this.style?.height,\n        width: this.style?.width,\n        borderRadius: this.style?.borderRadius,\n      };\n    }\n    getOuterViewStyle = () => {\n      return {\n        height: this.style?.height,\n        width: this.style?.width,\n        borderRadius: this.style?.outerViewBorderRadius,\n        outline: this.style?.outerView,\n        outlineOffset: this.style?.outerViewSpacing\n      };\n    }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cometchat-avatar': CometChatAvatar\n  }\n}"]}